{
	consul: "localhost:8500",
	logging: {
		level: "INFO",
		format: "default",
		output: "stdout"
	},
	jobs: [
		//Events:
		//    healthy: emitted when the job's health check succeeds.
		//    unhealthy: emitted when the job's health check fails.
		//    exitSuccess: emitted when the process associated with the job exits with an exit code 0.
		//    exitFailed: emitted when the process associated with the job exits with a non-0 exit code.
		//    stopping: emitted when the job is asked to stop but before it does so. Useful when the job has a stop timeout.
		//    stopped: emitted when the job is stopped. Note that this is not the same as the process exiting because a job might have many executions of its process.
		//    startup: published to all jobs when ContainerPilot is ready to start.
		//    shutdown: published to all jobs when ContainerPilot is shutting down.
		//    changed: published when a watch sees a change in a dependency.
		//    enterMaintenance: published when the control plane is told to enter maintenance mode for the container. All jobs will be automatically deregistered from Consul when this happens, so you only want to react to this event if there is some other task to perform.
		//    exitMaintenance: published when the control plane is told to exit maintenance mode for the container.
		//{
			// a service that doesn't have a "when" field starts up on the
			// global "startup" event by default
			//name: "consul-agent",
			// note we don't have a port here because we don't intend to
			// advertise one to the service discovery backend
			//exec: "consul -agent -join consul",
			//restart: "always"
		//},
		{
			name: "startup",
			exec: "prestart.sh",
			// exec: "chown -R rabbitmq: /usr/lib/rabbitmq && collectd -t -C /etc/collectd/collectd.conf 2>&1 >/dev/null && echo 'Collectd config OK'",
			restarts: "never"
		},
		{
			name: "redis",
			exec: "redis-server /etc/redis.conf",
			restarts: "unlimited",
			when: {
				source: "startup",
				once: "exitSuccess"
			},
			health: {
				exec: "redis-healthcheck",
				interval: 20,
				ttl: 60,
				timeout: "5s"
			}
		},
		{
			name: "collectd",
			exec: "collectd -f",
			restarts: "unlimited",
			when: {
				source: "rabbitmq",
				once: "healthy"
			},
			health: {
				exec: "collectd-healthcheck",
				interval: 20,
				ttl: 60,
				timeout: "10s"
			}
		},
		{
			name: "rabbitmq",
			exec: "rabbitmq-server",
			restarts: "unlimited",
			when: {
				source: "startup",
				once: "exitSuccess"
			},
			health: {
				exec: "rabbitmq-healthcheck",
				interval: 20,
				ttl: 60,
				timeout: "10s"
			}
		},
		{
			name: "minemeld",
			exec: "supervisord -n -c /opt/minemeld/supervisor/config/supervisord.conf --pidfile /var/run/minemeld/minemeld.pid",
			restarts: "never",
			stopTimeout: "60s",
			when: {
				source: "collectd",
				once: "healthy"
			},
			health: {
				exec: "true",
				//exec: "/var/run/minemeld/minemeld.sock",
				interval: 20,
				ttl: 60,
				timeout: "10s"
			}
		},
		{
			name: "minemeld-shutdown",
			exec: "supervisorctl -c /etc/minemeld/supervisor/supervisord.conf stop all",
			stopTimeout: "30s",
			restarts: "never",
			when: {
				source: "minemeld",
				once: "stopping"
			}
		},
		{
			name: "web",
			exec: "nginx",
			restarts: "unlimited",
		}
	]
}
